package cz.muni.fi.pa165.restClient.view;

import cz.muni.fi.pa165.restClient.remote.CaloricTableEntryRest;
import cz.muni.fi.pa165.restClient.remote.SportActivityRest;
import cz.muni.fi.pa165.sports.api.dto.CaloricTableEntryDto;
import cz.muni.fi.pa165.sports.api.dto.SportActivityDto;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.JOptionPane;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.ResourceAccessException;

/**
 * Main form of application. Allows view, create, update, delete of
 * CaloricTableEntry and SportActivity.
 *
 */
public class MainForm extends javax.swing.JFrame {

    @Autowired
    private CaloricTableEntryRest caloricTableEntryRest;

    @Autowired
    private SportActivityRest sportActivityRest;

    private CaloricTableModel caloricTableModel = new CaloricTableModel();

    private SportActivityTableModel sportActivityModel = new SportActivityTableModel();

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jTextField4 = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sports manager - REST client");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTable1.setModel(caloricTableModel);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Add/Edit Caloric table entry"));

        jLabel1.setText("Sport activity:");
        jLabel1.setPreferredSize(new java.awt.Dimension(80, 14));

        jLabel2.setText("Weight from:");
        jLabel2.setPreferredSize(new java.awt.Dimension(80, 14));

        jLabel3.setText("Weight to:");
        jLabel3.setPreferredSize(new java.awt.Dimension(80, 14));

        jLabel4.setText("Calory index:");
        jLabel4.setPreferredSize(new java.awt.Dimension(80, 14));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.setNextFocusableComponent(jTextField1);

        jTextField1.setName(""); // NOI18N
        jTextField1.setNextFocusableComponent(jTextField2);

        jTextField2.setNextFocusableComponent(jTextField3);

        jTextField3.setNextFocusableComponent(jButton1);

        jButton1.setText("Update entry");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Create new entry");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Delete selected entry");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField2))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField3)))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(3, 3, 3)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Caloric table", jPanel1);

        jTable2.setModel(sportActivityModel);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);
        jTable2.getAccessibleContext().setAccessibleName("");
        jTable2.getAccessibleContext().setAccessibleDescription("");

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Add/Edit Sport activity"));

        jLabel5.setText("Name:");
        jLabel5.setPreferredSize(new java.awt.Dimension(80, 14));

        jButton4.setText("Update entry");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Create new entry");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Delete selected entry");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jTextField4.setName(""); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField4, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel5.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 581, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 377, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Sport activities", jPanel2);

        jMenu1.setText("File");

        jMenuItem1.setText("Refresh caloric table");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Refresh sport activities");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //UPDATE CALORIC ENTRY BUTTON
        int rowId = jTable1.getSelectedRow();
        if (rowId == -1) {
            JOptionPane.showMessageDialog(this.getParent(), "You need to select which row you want to update");
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, "Updating entry without selected row");
        } else {
            try {
                String weightFrom = jTextField1.getText();
                String weightTo = jTextField2.getText();
                String calories = jTextField3.getText();
                Long idActivity = Long.parseLong(jComboBox1.getSelectedItem().toString().split("\\. ")[0]);
                SportActivityDto sportActivity = sportActivityRest.loadSportActivityById(idActivity);

                Long id = (Long) jTable1.getValueAt(rowId, 0);

                CaloricTableEntryDto entry = caloricTableEntryRest.getCaloricTableEntryById(id);
                entry.setWeightFrom(Integer.valueOf(weightFrom));
                entry.setWeightTo(Integer.valueOf(weightTo));
                entry.setCalValue(Integer.valueOf(calories));
                entry.setSportActivity(sportActivity);

                caloricTableEntryRest.updateCaloricTableEntry(entry);
                refreshCaloricTable();
                refreshSportActivityTable();
            } catch (ResourceAccessException ex) {
                JOptionPane.showMessageDialog(this, "Server is unavailable. Please, try again later.");
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //CREATE CALORIC ENTRY BUTTON
        try {
            String weightFrom = jTextField1.getText();
            String weightTo = jTextField2.getText();
            String calories = jTextField3.getText();
            Long idActivity = Long.parseLong(jComboBox1.getSelectedItem().toString().split("\\. ")[0]);

            SportActivityDto sportActivity = sportActivityRest.loadSportActivityById(idActivity);

            CaloricTableEntryDto entry = new CaloricTableEntryDto();
            entry = caloricTableEntryValueChecker(entry, weightFrom, weightTo, calories);
            
            if (entry == null) {
                return;
            }
            
            entry.setSportActivity(sportActivity);

            caloricTableEntryRest.postCaloricTableEntry(entry);
            refreshCaloricTable();
        } catch (ResourceAccessException ex) {
            JOptionPane.showMessageDialog(this, "Server is unavailable. Please, try again later.");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //DELETE CALORIC ENTRY BUTTON
        int rowId = jTable1.getSelectedRow();
        if (rowId == -1) {
            JOptionPane.showMessageDialog(this.getParent(), "You need to select which row you want to delete");
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, "Deleting entry without selected row");
        } else {
            Long id = (Long) jTable1.getValueAt(rowId, 0);
            try {
                caloricTableEntryRest.deleteCaloricTableEntryById(id);
                refreshCaloricTable();
            } catch (HttpServerErrorException ex) {
                JOptionPane.showMessageDialog(this.getParent(), "Delete unsuccessful. Operation would break database FK constraints.", "DELETE PROBLEM", JOptionPane.ERROR_MESSAGE);

            } catch (ResourceAccessException ex) {
                JOptionPane.showMessageDialog(this, "Server is unavailable. Please, try again later.");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this.getParent(), "Delete unsuccessful.", "DELETE PROBLEM", JOptionPane.ERROR_MESSAGE);

            }
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        //UPDATE SPORT ACTIVITY BUTTON
        int rowId = jTable2.getSelectedRow();
        if (rowId == -1) {
            JOptionPane.showMessageDialog(this.getParent(), "You need to select which row you want to update");
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, "Updating entry without selected row");
        } else {
            try {
                String newName = jTextField4.getText();
                Long id = (Long) jTable2.getValueAt(rowId, 0);
                SportActivityDto sportActivity = sportActivityRest.loadSportActivityById(id);
                if (sportActivity == null) {
                    JOptionPane.showMessageDialog(this.getParent(), "Sport activity no longer exists. Please refresh data.");
                    return;
                }
                sportActivity.setName(newName);
                sportActivityRest.updateSportActivity(sportActivity);
                refreshSportActivityTable();
                refreshCaloricTable();
            } catch (ResourceAccessException ex) {
                JOptionPane.showMessageDialog(this, "Server is unavailable. Please, try again later.");
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        //CREATE SPORT ACTIVITY BUTTON 
        try {
            String name = jTextField4.getText();

            SportActivityDto sportActivity = new SportActivityDto();
            sportActivity.setName(name);
            sportActivityRest.postSportActivity(sportActivity);
            refreshSportActivityTable();
        } catch (ResourceAccessException ex) {
            JOptionPane.showMessageDialog(this, "Server is unavailable. Please, try again later.");
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        //DELETE SPORT ACTIVITY BUTTON
        int rowId = jTable2.getSelectedRow();
        if (rowId == -1) {
            JOptionPane.showMessageDialog(this.getParent(), "You need to select which row you want to delete");
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, "Deleting entry without selected row");
        } else {
            Long id = (Long) jTable2.getValueAt(rowId, 0);
            try {
                sportActivityRest.deleteSportActivityById(id);
                refreshSportActivityTable();
            } catch (HttpServerErrorException ex) {
                JOptionPane.showMessageDialog(this.getParent(), "Delete unsuccessful. Operation would break database FK constraints.", "DELETE PROBLEM", JOptionPane.ERROR_MESSAGE);

            } catch (ResourceAccessException ex) {
                JOptionPane.showMessageDialog(this, "Server is unavailable. Please, try again later.");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this.getParent(), "Delete unsuccessful.", "DELETE PROBLEM", JOptionPane.ERROR_MESSAGE);

            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        refreshCaloricTable();
        refreshSportActivityTable();

        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable2.getTableHeader().setReorderingAllowed(false);
    }//GEN-LAST:event_formWindowOpened

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        refreshCaloricTable();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        refreshSportActivityTable();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // load data from selected row to textboxes
        Long id = (Long) jTable1.getValueAt(jTable1.getSelectedRow(), 0);
        try {
            CaloricTableEntryDto caloricTableEntryDto = caloricTableEntryRest.getCaloricTableEntryById(id);
            SportActivityDto sportActivityDto = caloricTableEntryDto.getSportActivity();
            String searchSportTitle = sportActivityDto.getId() + ". " + sportActivityDto.getName();

            // set combo box
            ComboBoxModel model = jComboBox1.getModel();
            for (int i = 0; i < model.getSize(); i++) {
                boolean comboboxRefreshed = false;
                Object element = model.getElementAt(i);
                if (element.toString().equals(searchSportTitle)) {
                    jComboBox1.setSelectedIndex(i);
                    break;
                }

                // if element is not in combobox, then refresh it
                if (i - 1 == model.getSize() && !comboboxRefreshed) {
                    refreshSportActivityTable();
                    comboboxRefreshed = true;
                    i = 0;
                }
            }

            jTextField1.setText(caloricTableEntryDto.getWeightFrom().toString());
            jTextField2.setText(caloricTableEntryDto.getWeightTo().toString());
            jTextField3.setText(caloricTableEntryDto.getCalValue().toString());
        } catch (ResourceAccessException ex) {
            JOptionPane.showMessageDialog(this, "Server is unavailable. Please, try again later.");
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        String name = (String) jTable2.getValueAt(jTable2.getSelectedRow(), 1);
        jTextField4.setText(name);
    }//GEN-LAST:event_jTable2MouseClicked

    /**
     * Load fresh data from rest service to table
     */
    private void refreshCaloricTable() {
        try {
            ((CaloricTableModel) jTable1.getModel()).data = caloricTableEntryRest.getAllCaloricTableEntriesArray();
            ((CaloricTableModel) jTable1.getModel()).fireTableChanged(null);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(30);
        } catch (ResourceAccessException ex) {
            JOptionPane.showMessageDialog(this, "Server is unavailable. Please, try again later.");
        } catch (RuntimeException ex) {
            JOptionPane.showMessageDialog(this, "Refresh failed: " + ex.getMessage());
        }
    }

    /**
     * Load fresh data from rest service to table
     */
    private void refreshSportActivityTable() {
        try {
            ((SportActivityTableModel) jTable2.getModel()).data = sportActivityRest.getAllSportActivities();
            ((SportActivityTableModel) jTable2.getModel()).fireTableChanged(null);
            jTable2.getColumnModel().getColumn(0).setMaxWidth(30);

            // refresh combobox
            jComboBox1.removeAllItems();
            List<SportActivityDto> activities = sportActivityRest.listAllSportActivities();
            for (SportActivityDto activity : activities) {
                jComboBox1.addItem(makeObj(activity.getId() + ". " + activity.getName()));
            }

        } catch (ResourceAccessException ex) {
            JOptionPane.showMessageDialog(this, "Server is unavailable. Please, try again later.");
        } catch (RuntimeException ex) {
            JOptionPane.showMessageDialog(this, "Refresh failed: " + ex.getMessage());
        }
    }

    private Object makeObj(final String item) {
        return new Object() {
            public String toString() {
                return item;
            }
        };
    }

    /**
     * Check values getted from form.
     */
    private CaloricTableEntryDto caloricTableEntryValueChecker(CaloricTableEntryDto entry, String weightFrom, String weightTo, String calories) {
        try {
            entry.setWeightFrom(Integer.valueOf(weightFrom));
            entry.setWeightTo(Integer.valueOf(weightTo));
            entry.setCalValue(Integer.valueOf(calories));
        } catch (Exception ex) {
            entry = null;
            JOptionPane.showMessageDialog(this, "Weight from, Weight to and Calory index must be Integer");
        }

        if (entry != null && entry.getWeightFrom() > entry.getWeightTo()) {
            entry = null;
            JOptionPane.showMessageDialog(this, "Weight from is higher than Weight to");
        }
        return entry;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
